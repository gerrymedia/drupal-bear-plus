<?php

/**
 * @file
 * Advanced CSS/JS aggregation module
 *
 */

define('ADVAGG_AGGREGATE_MODE', 2);                       // Default mode for aggregate creation.
define('ADVAGG_ASYNC_GENERATION', FALSE);                 // Default generate the aggregate async.
define('ADVAGG_ASYNC_SOCKET_CONNECT', FALSE);             // Default value to see if we can use the STREAM_CLIENT_ASYNC_CONNECT flag.
define('ADVAGG_BUNDLE_BUILT_MODE', FALSE);                // Default mode of advagg_bundle_built() in regards to how file_exists is used.
define('ADVAGG_CHECKSUM_MODE', 'filemtime');              // Default file checksum mode.
define('ADVAGG_CLOSURE', TRUE);                           // Default value to see if advanced CSS/JS aggregation is enabled.
define('ADVAGG_COOKIE_NAME', 'AdvAggDisabled');           // Default value for the name of the cookie used to bypass aggregation.
define('ADVAGG_CSS_COUNT_THRESHOLD', 25);                 // Default value for number of files that can be added before using @import.
define('ADVAGG_CSS_LOGGED_IN_IE_DETECT', TRUE);           // Default value for not using @import if logged in and not IE.
define('ADVAGG_CSS_RENDER_FUNCTION', 'advagg_unlimited_css_builder'); // Default function used to render css output.
define('ADVAGG_CUSTOM_FILES_DIR', '');                    // Default value for a custom files directory just for advagg directories.
define('ADVAGG_DEBUG', FALSE);                            // Default value for writing debug info to watchdog.
define('ADVAGG_DIR_HTACCESS', TRUE);                      // Default value for creating a htaccess file in the advagg directories.
define('ADVAGG_ENABLED', TRUE);                           // Default value to see if advanced CSS/JS aggregation is enabled.
define('ADVAGG_FILE_LAST_USED_INTERVAL', 1296000);        // Default file last used check-in is 12 hours.
define('ADVAGG_FILE_SAVE_FUNCTION', 'advagg_file_saver'); // Default function used to save files.
define('ADVAGG_GZIP_COMPRESSION', FALSE);                 // Default gzip compression setting.
define('ADVAGG_JS_RENDER_FUNCTION', 'advagg_js_builder'); // Default function used to render js output.
define('ADVAGG_ONLY_CSS_FROM_VARIABLES', FALSE);          // Default value to see if preprocess CSS files.
define('ADVAGG_PAGE_CACHE_MODE', TRUE);                   // Default mode of advagg in regards to the page cache.
define('ADVAGG_PREPROCESS_CSS', TRUE);                    // Default value to see if preprocess CSS files.
define('ADVAGG_PREPROCESS_JS', TRUE);                     // Default value to see if preprocess JavaScript files.
define('ADVAGG_PRUNE_ON_CRON', TRUE);                     // Default value to see if we removed old files/bundles from the database.
define('ADVAGG_REBUILD_ON_FLUSH', FALSE);                 // Default value for rebuilding the bundle on cache flush.
define('ADVAGG_SERVER_ADDR', FALSE);                      // Default value for server address.
define('ADVAGG_SOCKET_TIMEOUT', 1);                       // How long to wait for the server to come back with an async opp.
define('ADVAGG_STALE_FILE_LAST_USED_THRESHOLD', 259200);  // Default stale file threshold is 3 days for atime.
define('ADVAGG_STALE_FILE_THRESHOLD', 518400);            // Default stale file threshold is 6 days for mtime.
define('ADVAGG_STRICT_JS_BUNDLES', TRUE);                 // Default value to see if JS bundle matching should be strict.
define('ADVAGG_USE_FULL_CACHE', TRUE);                    // Default value to see if we cache at the advagg_processor level.

// __DIR__ fallback for PHP <5.3.0
if (!defined('__DIR__')) {
  define('__DIR__', dirname(__FILE__));
}

// Load Includes
$includes = array('async', 'bundle', 'cache', 'cron', 'css', 'file', 'js', 'utilities');
if (module_exists('ctools')) {
  $includes[] = 'ctools';
}
foreach ($includes as $file) {
  $file = __DIR__ . "/includes/$file.inc";
  if (file_exists($file)) {
    include $file;
  }
  else {
    drupal_set_message(t('Required include not found: !include', array('!include' => $file)), 'error', FALSE);
  }
}

/**
 * Implements hook_permission().
 */
function advagg_permission() {
  return array(
    'bypass advanced aggregation' => array(
      'title' => t('bypass advanced aggregation'),
      'description' => t('User can use URL query strings to bypass AdvAgg.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function advagg_menu() {
  list($css_path, $js_path) = advagg_get_root_files_dir();
  $file_path = drupal_get_path('module', 'advagg') . '/includes';
  $items = array();
  $items[$css_path . '/%'] = array(
    'page callback' => 'advagg_missing_css',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file path' => $file_path,
    'file' => 'missing.inc',
  );
  $items[$js_path . '/%'] = array(
    'page callback' => 'advagg_missing_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file path' => $file_path,
    'file' => 'missing.inc',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advagg_form_system_performance_settings_alter(&$form, &$form_state) {
  include __DIR__ . '/includes/admin.inc';
  _advagg_form_system_performance_settings_alter($form, $form_state);
}

/**
 * Implements hook_init().
 */
function advagg_init() {
  global $conf;
  // Disable advagg if requested.
  if (isset($_GET['advagg']) && $_GET['advagg'] == -1 && user_access('bypass advanced aggregation')) {
    $conf['advagg_enabled'] = FALSE;
    $conf['advagg_use_full_cache'] = FALSE;
  }
  // Enable debugging if requested.
  if (isset($_GET['advagg-debug']) && $_GET['advagg-debug'] == 1 && user_access('bypass advanced aggregation')) {
    $conf['advagg_debug'] = TRUE;
    $conf['advagg_use_full_cache'] = FALSE;
  }
  // Enable core preprocessing if requested.
  if (isset($_GET['advagg-core']) && $_GET['advagg-core'] == 1 && user_access('bypass advanced aggregation')) {
    $conf['preprocess_css'] = TRUE;
    $conf['preprocess_js'] = TRUE;
    $conf['advagg_use_full_cache'] = FALSE;
  }
  // Do not use the cache if the disable cookie is set.
  if (advagg_cookie_bypass()) {
    $conf['advagg_use_full_cache'] = FALSE;
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @param $type
 */
function advagg_element_info_alter(&$type) {
  // Swap in our own aggregation callback.
  if (isset($type['styles']['#aggregate_callback'])) {
    $type['styles']['#aggregate_callback'] = '_advagg_aggregate_css';
//     $type['styles']['#group_callback'] = '_advagg_group_css';
  }
}

/**
 * Implements hook_process_html().
 */
function advagg_process_html(&$variables) {
  global $_advagg;
  // Invoke hook_advagg_disable_processor
  $disabled = module_invoke_all('advagg_disable_processor');
  // If disabled, skip
  if (!variable_get('advagg_enabled', ADVAGG_ENABLED) || in_array(TRUE, $disabled, TRUE)) {
    // @TODO: Determine if this is still necessary with the D7 version of
    // jquery_update.
    // if (module_exists('jquery_update')) {
    //   return jquery_update_preprocess_page($variables);
    // }
    // else {
    //   return;
    // }
    return;
  }
  // CSS
  advagg_process_html_css($variables);
  // JS
  advagg_process_html_js($variables);
  // Send requests to server if async enabled.
  advagg_async_send_http_request();
  // Write debug info to watchdog if debugging enabled.
  if (variable_get('advagg_debug', ADVAGG_DEBUG)) {
    $data = array(
      'css_before_vars' => $css_orig,
      'css_before_function' => $css_func,
      'css_before_styles' => $css_styles,
      'css_before_inline' => $css_func_inline,
      'css_before_conditional_styles' => $css_conditional_styles,
      'css_merged' => $css,
      'css_after' => $processed_css,
      'js_before' => $js_code_orig,
      'js_after' => $js_code,
    );
    $data['runtime'] = isset($_advagg['debug']) ? $_advagg['debug'] : FALSE;
    $data = str_replace('    ', '&nbsp;&nbsp;&nbsp;&nbsp;', nl2br(htmlentities(iconv('utf-8', 'utf-8//IGNORE', print_r($data, TRUE)), ENT_QUOTES, 'UTF-8')));
    watchdog('advagg', 'Debug info: !data', array('!data' => $data), WATCHDOG_DEBUG);
  }
}

/**
 * Implements hook_advagg_disable_processor().
 */
function advagg_advagg_disable_processor() {
  // Disable advagg on the configuration page; in case something bad happened.
  if (isset($_GET['q']) && ($_GET['q'] == 'admin/config/development/performance' || $_GET['q'] == 'batch')) {
    return TRUE;
  }
}

/**
 * Send out a fast 404 and exit.
 */
function advagg_missing_fast404($msg = '') {
  global $base_path;
  if (!headers_sent()) {
    header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
    header('X-AdvAgg: Failed Validation. ' . $msg);
  }

  print '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' . "\n";
  print '<html>';
  print '<head><title>404 Not Found</title></head>';
  print '<body><h1>Not Found</h1>';
  print '<p>The requested URL was not found on this server.</p>';
  print '<p><a href="' . $base_path . '">Home</a></p>';
  print '<!-- advagg_missing_fast404 -->';
  print '</body></html>';
  exit();
}

/**
 * Generate .htaccess rules and place them in advagg dir
 *
 * @param $dest
 *   destination of the file that just got saved.
 * @param $force
 *   force recreate the .htaccess file.
 */
function advagg_htaccess_check_generate($dest, $force = FALSE) {
  global $base_path;
  if (!$force && !variable_get('advagg_dir_htaccess', ADVAGG_DIR_HTACCESS)) {
    return TRUE;
  }

  $dir = dirname($dest);
  $htaccess_file = $dir . '/.htaccess';
  advagg_clearstatcache(TRUE, $htaccess_file);
  if (!$force && file_exists($htaccess_file)) {
    return TRUE;
  }

  list($css_path, $js_path) = advagg_get_root_files_dir();

  $type = '';
  if ($dir == $js_path[1]) {
    $ext = 'js';
    $path = $js_path[1];
    $type = 'text/javascript';
  }
  elseif ($dir == $css_path[1]) {
    $ext = 'css';
    $path = $css_path[1];
    $type = 'text/css';
  }
  else {
    return FALSE;
  }

  $data = "\n";
  if (variable_get('advagg_gzip_compression', ADVAGG_GZIP_COMPRESSION)) {
    $data .= "<IfModule mod_rewrite.c>\n";
    $data .= "  RewriteEngine on\n";
    $data .= "  RewriteBase ${base_path}${path}\n";
    $data .= "\n";
    $data .= "  # Send 404's back to index.php\n";
    $data .= "  RewriteCond %{REQUEST_FILENAME} !-s\n";
    $data .= "  RewriteRule ^(.*)$ ${base_path}index.php?q=$path/$1 [L]\n";
    $data .= "\n";
    $data .= "  # Rules to correctly serve gzip compressed $ext files.\n";
    $data .= "  # Requires both mod_rewrite and mod_headers to be enabled.\n";
    $data .= "  <IfModule mod_headers.c>\n";
    $data .= "    # Serve gzip compressed $ext files if they exist and client accepts gzip.\n";
    $data .= "    RewriteCond %{HTTP:Accept-encoding} gzip\n";
    $data .= "    RewriteCond %{REQUEST_FILENAME}\.gz -s\n";
    $data .= "    RewriteRule ^(.*)\.$ext$ $1\.$ext\.gz [QSA]\n";
    $data .= "\n";
    $data .= "    # Serve correct content types, and prevent mod_deflate double gzip.\n";
    $data .= "    RewriteRule \.$ext\.gz$ - [T=$type,E=no-gzip:1]\n";
    $data .= "\n";
    $data .= "    <FilesMatch \"\.$ext\.gz$\">\n";
    $data .= "      # Serve correct encoding type.\n";
    $data .= "      Header set Content-Encoding gzip\n";
    $data .= "      # Force proxies to cache gzipped & non-gzipped $ext files separately.\n";
    $data .= "      Header append Vary Accept-Encoding\n";
    $data .= "    </FilesMatch>\n";
    $data .= "  </IfModule>\n";
    $data .= "</IfModule>\n";
    $data .= "\n";
  }
  $data .= "<FilesMatch \"^${ext}_[0-9a-f]{32}_.+\.$ext(\.gz)?\">\n";
  $data .= "  # No mod_headers\n";
  $data .= "  <IfModule !mod_headers.c>\n";
  $data .= "    # No mod_expires\n";
  $data .= "    <IfModule !mod_expires.c>\n";
  $data .= "      # Use ETags.\n";
  $data .= "      FileETag MTime Size\n";
  $data .= "    </IfModule>\n";
  $data .= "\n";
  $data .= "    # Use Expires Directive.\n";
  $data .= "    <IfModule mod_expires.c>\n";
  $data .= "      # Do not use ETags.\n";
  $data .= "      FileETag None\n";
  $data .= "      # Enable expirations.\n";
  $data .= "      ExpiresActive On\n";
  $data .= "      # Cache all aggregated $ext files for 480 weeks after access (A).\n";
  $data .= "      ExpiresDefault A290304000\n";
  $data .= "    </IfModule>\n";
  $data .= "  </IfModule>\n";
  $data .= "\n";
  $data .= "  <IfModule mod_headers.c>\n";
  $data .= "    # Set a far future Cache-Control header to 480 weeks.\n";
  $data .= "    Header set Cache-Control \"max-age=290304000, no-transform, public\"\n";
  $data .= "    # Set a far future Expires header.\n";
  $data .= "    Header set Expires \"Tue, 20 Jan 2037 04:20:42 GMT\"\n";
  $data .= "    # Pretend the file was last modified a long time ago in the past.\n";
  $data .= "    Header set Last-Modified \"Wed, 20 Jan 1988 04:20:42 GMT\"\n";
  $data .= "    # Do not use etags for cache validation.\n";
  $data .= "    Header unset ETag\n";
  $data .= "  </IfModule>\n";
  $data .= "</FilesMatch>\n";

  if (!advagg_file_save_data($data, $htaccess_file, FILE_EXISTS_REPLACE)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Return a large array of the CSS & JS files loaded on this page.
 *
 * @param $js_files_excluded
 *   array of js files to not include in the output array.
 * @param $css_files_excluded
 *   array of css files to not include in the output array.
 * @return
 *   array.
 */
function advagg_get_js_css_get_array($js_files_excluded = array(), $css_files_excluded = array()) {
  global $conf, $_advagg;

  // Setup variables.
  $variables = array(
    'css' => array(),
    'js' => array(),
  );
  // Setup render functions.
  $css_function = variable_get('advagg_css_render_function', ADVAGG_CSS_RENDER_FUNCTION);
  $js_function = variable_get('advagg_js_render_function', ADVAGG_JS_RENDER_FUNCTION);
  $conf['advagg_css_render_function'] = 'advagg_css_array';
  $conf['advagg_js_render_function'] = 'advagg_js_array';

  // Run CSS code.
  $css_array = array();
  $variables['css'] = drupal_add_css(CSS_DEFAULT);
  if (module_exists('less')) {
    less_preprocess_page($variables, NULL);
  }
  $css_func_inline = advagg_add_css_inline();
  if (!empty($css_func_inline)) {
    $variables['css'] = advagg_merge_inline_css($variables['css'], $css_func_inline);
  }
  // Remove excluded CSS files.
  foreach ($variables['css'] as $media => $types) {
    foreach ($types as $type => $values) {
      foreach ($values as $filename => $preprocess) {
        if (in_array($filename, $css_files_excluded)) {
          unset($variables['css'][$media][$type][$filename]);
        }
      }
    }
  }
  $css_array = advagg_process_css($variables['css']);

  // Run JS code.
  $js_array = array();
  $variables['js']['header'] = drupal_add_js(NULL, array('type' => NULL));
  if (variable_get('advagg_closure', ADVAGG_CLOSURE) && !empty($_advagg['closure'])) {
    $variables['js']['footer'] = drupal_add_js(NULL, array('type' => NULL, 'scope' => 'footer'));
  }
  advagg_jquery_updater($variables['js']['header']);
  // Remove excluded JS files.
  foreach ($variables['js'] as $scope => $values) {
    foreach ($values as $type => $data) {
      foreach ($data as $filename => $info) {
        if (in_array($filename, $js_files_excluded)) {
          unset($variables['js'][$scope][$type][$filename]);
        }
      }
    }
  }
  $js_array = advagg_process_js($variables['js']);

  // Set render functions back to defaults.
  $conf['advagg_css_render_function'] = $css_function;
  $conf['advagg_js_render_function'] = $js_function;

  // Return arrays.
  return array(
    'js' => $js_array,
    'css' => $css_array,
  );
}

/**
 * Implements hook_file_download().
 *
 * Return the correct headers for advagg bundles.
 */
function advagg_file_download($file, $type = '') {
  // Do nothing if not an AdvAgg File.
  if (strpos($file, '/advagg_') === FALSE || empty($type)) {
    return;
  }

  // Set the headers.
  $return = array();
  $return[] = 'Content-Length: ' . filesize($file);
  // Set a far future Cache-Control header (480 weeks), which prevents
  // intermediate caches from transforming the data and allows any
  // intermediate cache to cache it, since it's marked as a public resource.
  $return[] = "Cache-Control: max-age=290304000, no-transform, public";
  // Set a far future Expires header. The maximum UNIX timestamp is somewhere
  // in 2038. Set it to a date in 2037, just to be safe.
  $return[] = 'Expires: Tue, 20 Jan 2037 04:20:42 GMT';
  // Pretend the file was last modified a long time ago in the past, this will
  // prevent browsers that don't support Cache-Control nor Expires headers to
  // still request a new version too soon (these browsers calculate a
  // heuristic to determine when to request a new version, based on the last
  // time the resource has been modified).
  // Also see http://code.google.com/speed/page-speed/docs/caching.html.
  $return[] = 'Last-Modified: Wed, 20 Jan 1988 04:20:42 GMT';

  if ($type == 'css') {
    $return[] = 'Content-Type: text/css';
  }
  if ($type == 'js') {
    $return[] = 'Content-Type: text/javascript';
  }
  return $return;
}
